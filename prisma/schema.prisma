// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  username      String   @unique
  email         String   @unique
  gender        String
  place_birth   String
  date_birth    String
  address       String
  school_origin String
  major_class   String
  grade         String
  phone_number  String
  password      String
  pre_test      String @default("")
  post_test     String @default("")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  articles      Article[] // One-to-Many relationship with Article
  quizzes       Quiz[]    // One-to-Many relationship with Quiz
  results       Result[]  // One-to-Many relationship with Result
}

model Article {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  content     String
  category    String
  image       String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Quiz {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  questions   Question[] // One-to-Many relationship with Question
  results     Result[]   // One-to-Many relationship with Result
}

model Question {
  id          Int       @id @default(autoincrement())
  quiz        Quiz      @relation(fields: [quizId], references: [id])
  quizId      Int
  question    String
  options     Option[]  // One-to-Many relationship with Option
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Option {
  id          Int       @id @default(autoincrement())
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  Int
  option      String
  isCorrect   Boolean   @default(false)
  // createdAt   DateTime  @default(now())
  // updatedAt   DateTime  @updatedAt
}

model Result {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  quiz        Quiz      @relation(fields: [quizId], references: [id])
  quizId      Int
  score       Float
  takenAt     DateTime  @default(now())
}